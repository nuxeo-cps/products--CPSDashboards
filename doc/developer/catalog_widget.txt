======================
Catalog Tabular Widget
======================

:Revision: $Id$

.. contents:: :depth: 1
.. sectnum::

The Catalog Tabular Widget is a Tabular Widget that performs a
ZCatalog query.

In terms of classes, this is a simple subclass of
TabularWidget that provides an implementation of listRowDataStructures
through the portal_catalog tool.

Let's make one::

    >>> from Products.CPSDashboards.widgets.catalog import CatalogTabularWidget
    >>> cat = CatalogTabularWidget('thecat')

We'll need the pretty printer::

    >>> from pprint import PrettyPrinter
    >>> pretty_print=PrettyPrinter(width=50).pprint

Properties
----------

The ``fulltext_keys`` property indicates keys used in the Catalog Tool
query for fulltext searches.

The ``fulltext_ors`` property are the corresponding incoming key for
or searches. *They must correspond perfectly*.

Default values are set for a typical CPS setup::

    >>> cat.fulltext_keys
    ('SearchableText', 'ZCTitle')
    >>> cat.fulltext_ors
    ('ZCText_or', 'ZCTitle_or')

Process
-------
As incoming parameters, the widget uses the result of base class'
buildFilters method. It processes them with the filterToQuery method
before forwarding to the Catalog Tool. Finally, it adapts the
resulting brains as dastructures.

The filterToQuery method takes only care of fulltext searches, using the
widget's properties to find them.

    >>> filters = {'ZCText_or': 'abc', 'other': 'other'}
    >>> cat.filtersToQuery(filters)
    >>> pretty_print(filters)
    {'other': 'other', 'SearchableText': 'abc'}

Now let's see what happens with several tokens:

    >>> filters = {'ZCTitle_or': 'foo eggs'}
    >>> cat.filtersToQuery(filters)
    >>> filters
    {'ZCTitle': '(foo OR eggs)'}

Of course we don't fail if the keys are missing::
    >>> filters = {}
    >>> cat.filtersToQuery(filters)

Queries with ranges (the filter widget has to push such keys in ds)::

    >>> filters = {'used_min': 5}
    >>> cat.filtersToQuery(filters)
    >>> pretty_print(filters)
    {'used': {'query': 5, 'range': 'min'}}

This also supports 'min:max' ranges on demand, according the range suffixes::

    >>> from DateTime import DateTime
    >>> filters = {'date_min': DateTime('2006/01/22'),
    ...            'date_max': DateTime('2006/02/03')}
    >>> cat.filtersToQuery(filters)
    >>> pretty_print(filters)
    {'date': {'query': [DateTime('2006/01/22'),
                        DateTime('2006/02/03')],
              'range': 'min:max'}}

Empty values are ignored if any::

    >>> filters = {'date_min': None,
    ...            'date_max': DateTime('2006/02/03')}
    >>> cat.filtersToQuery(filters)
    >>> pretty_print(filters)
    {'date': {'query': DateTime('2006/02/03'),
              'range': 'max'}}

Path queries
~~~~~~~~~~~~

The path index is always about physical path but user input will
always be relative to the portal. So we need to put the portal's
physical path in front:

    >>> class FakePortalUrl:
    ...    def getPhysicalPath(self):
    ...       return ['', 'portal', 'portal_url']
    >>> cat.portal_url = FakePortalUrl()
    >>> filters = {'path' : 'some/path'}
    >>> cat.filtersToQuery(filters)
    >>> filters
    {'path': '/portal/some/path'}

Batching subtleties
~~~~~~~~~~~~~~~~~~~

Now we demonstrate what happens in case the user requests an out of
range page of requests. We concentrate on the most difficult case of
Lucene (native batching means that several requests have to be issued,
non-transasctional behavior means that extra robustness is needed).

Let's create a Lucene Tabular Widget, and have it use a fake lucene
catalog that has 30 results

    >>> from Products.CPSDashboards.testing import FakeLuceneCatalog
    >>> from Products.CPSDashboards.widgets.catalog import LuceneTabularWidget
    >>> wid = LuceneTabularWidget('thecat')
    >>> wid.portal_catalog = cat = FakeLuceneCatalog()
    >>> cat.setNbResults(30)

Now let's try the simplest out of range request. Imagine there was 31
results and the user just removed the 31st from the 4th page and is -
of course - redirected to the 4th page again...

    >>> brains, nb_results, b_start = wid._doBatchedQuery(cat, 30, 10, {})

We actually switched to the 3rd page (the widget tries this most
common case first)

    >>> b_start
    20
    >>> len(brains)
    10
    >>> nb_results
    30

Now a very much out of range request produces the same result (this
time, the widget has directly asked for the number of results):

    >>> brains, nb_results, b_start = wid._doBatchedQuery(cat, 300, 10, {})
    >>> b_start
    20
    >>> len(brains)
    10
    >>> nb_results
    30

Now a special mode of the fake lucene catalog: after the first request
issued to know the real number of results, this number actually
changes. This can happen in real life since the Lucene catalog isn't
transactional. Actually, the fake lucene catalog simply returns a
wrong total number of results. This is enough for our
testing/demonstrating purposes, since the request for the expected
last page will provide no result :

    >>> cat.wrong_out_of = 200
    >>> brains = cat(b_start=0, b_size=1)
    >>> brains[0].out_of
    200

This is what the catalog returns if we request the expected last page, based on
the wrong number of results
    >>> cat(b_start=190, b_size=10)
    []

In the case of a wrong indication like this, the widget defaults to
the first page:

    >>> brains, nb_results, b_start = wid._doBatchedQuery(cat, 300, 10, {})
    >>> b_start
    0
    >>> len(brains)
    10

In our testing context, the number of results is still wrong (returned
by the fake lucene catalog). This one is included for completeness in
order to avoid confusing a doctests maintainer. A real catalog would
have returned the new number of results, of course.

    >>> nb_results
    200

.. Emacs
.. Local Variables:
.. mode: rst
.. End:
.. Vim
.. vim: set filetype=rst:
